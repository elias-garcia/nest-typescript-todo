"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const builder_1 = require("./builder");
const container_1 = require("./container");
const resolver_1 = require("./resolver");
const invalid_middleware_exception_1 = require("../../errors/exceptions/invalid-middleware.exception");
const routes_mapper_1 = require("./routes-mapper");
const router_proxy_1 = require("../router/router-proxy");
const exceptions_handler_1 = require("../exceptions/exceptions-handler");
const router_method_factory_1 = require("../helpers/router-method-factory");
const runtime_exception_1 = require("../../errors/exceptions/runtime.exception");
const shared_utils_1 = require("../../common/utils/shared.utils");
class MiddlewaresModule {
    static getContainer() {
        return this.container;
    }
    static setup(container) {
        this.resolver = new resolver_1.MiddlewaresResolver(this.container);
        const modules = container.getModules();
        this.resolveMiddlewares(modules);
    }
    static resolveMiddlewares(modules) {
        modules.forEach((module, name) => {
            const instance = module.instance;
            this.loadConfiguration(instance, name);
            this.resolver.resolveInstances(module, name);
        });
    }
    static loadConfiguration(instance, module) {
        if (!instance.configure)
            return;
        const middlewaresBuilder = new builder_1.MiddlewareBuilder(this.routesMapper);
        instance.configure(middlewaresBuilder);
        if (!(middlewaresBuilder instanceof builder_1.MiddlewareBuilder))
            return;
        const config = middlewaresBuilder.build();
        this.container.addConfig(config, module);
    }
    static setupMiddlewares(app) {
        const configs = this.container.getConfigs();
        configs.forEach((moduleConfigs, module) => {
            [...moduleConfigs].map((config) => {
                config.forRoutes.map((route) => {
                    this.setupRouteMiddleware(route, config, module, app);
                });
            });
        });
    }
    static setupRouteMiddleware(route, config, module, app) {
        const { path, method } = route;
        const middlewares = [].concat(config.middlewares);
        middlewares.map((metatype) => {
            const collection = this.container.getMiddlewares(module);
            const middleware = collection.get(metatype.name);
            if (shared_utils_1.isUndefined(middleware)) {
                throw new runtime_exception_1.RuntimeException();
            }
            const { instance } = middleware;
            this.setupHandler(instance, metatype, app, method, path);
        });
    }
    static setupHandler(instance, metatype, app, method, path) {
        if (shared_utils_1.isUndefined(instance.resolve)) {
            throw new invalid_middleware_exception_1.InvalidMiddlewareException(metatype.name);
        }
        const router = this.routerMethodFactory.get(app, method).bind(app);
        const proxy = this.routerProxy.createProxy(instance.resolve(), this.exceptionHandler);
        router(path, proxy);
    }
}
MiddlewaresModule.routesMapper = new routes_mapper_1.RoutesMapper();
MiddlewaresModule.container = new container_1.MiddlewaresContainer();
MiddlewaresModule.exceptionHandler = new exceptions_handler_1.ExceptionsHandler();
MiddlewaresModule.routerProxy = new router_proxy_1.RouterProxy();
MiddlewaresModule.routerMethodFactory = new router_method_factory_1.RouterMethodFactory();
exports.MiddlewaresModule = MiddlewaresModule;
