"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
const constants_1 = require("../common/constants");
const constants_2 = require("../websockets/constants");
class DependenciesScanner {
    constructor(container) {
        this.container = container;
    }
    scan(module) {
        this.scanForModules(module);
        this.scanModulesForDependencies();
    }
    scanForModules(module) {
        this.storeModule(module);
        const importedModules = this.reflectMetadata(module, constants_1.metadata.MODULES);
        importedModules.map((imported) => this.scanForModules(imported));
    }
    storeModule(module) {
        this.container.addModule(module);
    }
    scanModulesForDependencies() {
        const modules = this.container.getModules();
        modules.forEach(({ metatype }) => {
            this.reflectRelatedModules(metatype);
            this.reflectComponents(metatype);
            this.reflectControllers(metatype);
            this.reflectExports(metatype);
        });
    }
    reflectRelatedModules(module) {
        const modules = this.reflectMetadata(module, constants_1.metadata.MODULES);
        modules.map((related) => this.storeRelatedModule(related, module));
    }
    reflectComponents(module) {
        const components = this.reflectMetadata(module, constants_1.metadata.COMPONENTS);
        components.map((component) => {
            this.storeComponent(component, module);
            this.reflectGatewaysMiddlewares(component, module);
        });
    }
    reflectControllers(module) {
        const routes = this.reflectMetadata(module, constants_1.metadata.CONTROLLERS);
        routes.map((route) => {
            this.storeRoute(route, module);
            this.reflectExceptionFilters(route, module);
        });
    }
    reflectExports(module) {
        const exports = this.reflectMetadata(module, constants_1.metadata.EXPORTS);
        exports.map((exportedComponent) => this.storeExportedComponent(exportedComponent, module));
    }
    reflectExceptionFilters(component, module) {
        const filters = this.reflectMetadata(component, constants_1.EXCEPTION_FILTERS_METADATA);
        filters.map((filter) => this.storeComponent(filter, module));
    }
    reflectGatewaysMiddlewares(component, module) {
        const middlewares = this.reflectMetadata(component, constants_2.GATEWAY_MIDDLEWARES);
        middlewares.map((middleware) => this.storeComponent(middleware, module));
    }
    storeRelatedModule(related, module) {
        this.container.addRelatedModule(related, module);
    }
    storeComponent(component, module) {
        this.container.addComponent(component, module);
    }
    storeExportedComponent(exportedComponent, module) {
        this.container.addExportedComponent(exportedComponent, module);
    }
    storeRoute(route, module) {
        this.container.addController(route, module);
    }
    reflectMetadata(module, metadata) {
        return Reflect.getMetadata(metadata, module) || [];
    }
}
exports.DependenciesScanner = DependenciesScanner;
