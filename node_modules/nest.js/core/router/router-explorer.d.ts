import 'reflect-metadata';
import { Controller } from '../../common/interfaces/controller.interface';
import { RequestMethod } from '../../common/enums/request-method.enum';
import { RouterProxy, RouterProxyCallback } from './router-proxy';
import { ExpressAdapter } from '../adapters/express-adapter';
import { Metatype } from '../../common/interfaces/metatype.interface';
import { ExceptionsFilter } from './interfaces/exceptions-filter.interface';
import { RouterExplorer } from './interfaces/explorer.inteface';
import { MetadataScanner } from '../metadata-scanner';
export declare class ExpressRouterExplorer implements RouterExplorer {
    private metadataScanner;
    private routerProxy;
    private expressAdapter;
    private exceptionsFilter;
    private readonly executionContextCreator;
    private readonly routerMethodFactory;
    private readonly logger;
    constructor(metadataScanner?: MetadataScanner, routerProxy?: RouterProxy, expressAdapter?: ExpressAdapter, exceptionsFilter?: ExceptionsFilter);
    explore(instance: Controller, metatype: Metatype<Controller>, moduleName: string): {
        path: string;
        router: any;
    };
    scanForPaths(instance: Controller, prototype?: any): RoutePathProperties[];
    exploreMethodMetadata(instance: Controller, instancePrototype: any, methodName: string): RoutePathProperties;
    applyPathsToRouterProxy(router: any, routePaths: RoutePathProperties[], instance: Controller, moduleName: string): void;
    private applyCallbackToRouter(router, pathProperties, instance, moduleName);
    private createCallbackProxy(instance, callback, moduleName);
    private fetchRouterPath(metatype);
    private validateRoutePath(path);
}
export interface RoutePathProperties {
    path: string;
    requestMethod: RequestMethod;
    targetCallback: RouterProxyCallback;
}
