"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
const exceptions_handler_1 = require("../exceptions/exceptions-handler");
const constants_1 = require("../../common/constants");
const shared_utils_1 = require("../../common/utils/shared.utils");
const unkown_module_exception_1 = require("../../errors/exceptions/unkown-module.exception");
class RouterExceptionFilters {
    constructor(container) {
        this.container = container;
    }
    create(instance, moduleName) {
        const exceptionHandler = new exceptions_handler_1.ExceptionsHandler();
        const filters = this.reflectExceptionFilters(instance);
        if (shared_utils_1.isEmpty(filters)) {
            return exceptionHandler;
        }
        const filtersHooks = this.resolveFiltersMetatypes(filters, moduleName);
        exceptionHandler.setCustomFilters(filtersHooks);
        return exceptionHandler;
    }
    reflectExceptionFilters(instance) {
        const prototype = Object.getPrototypeOf(instance);
        return Reflect.getMetadata(constants_1.EXCEPTION_FILTERS_METADATA, prototype.constructor) || [];
    }
    resolveFiltersMetatypes(filters, moduleName) {
        return filters.filter(metatype => shared_utils_1.isFunction(metatype))
            .map(metatype => ({
            instance: this.findExceptionsFilterInstance(metatype, moduleName),
            metatype,
        }))
            .filter(({ instance }) => instance.catch && shared_utils_1.isFunction(instance.catch))
            .map(({ instance, metatype }) => ({
            func: instance.catch.bind(instance),
            exceptionMetatypes: this.reflectCatchExceptions(metatype),
        }));
    }
    findExceptionsFilterInstance(metatype, moduleName) {
        const modules = this.container.getModules();
        if (!modules.has(moduleName)) {
            throw new unkown_module_exception_1.UnkownModuleException();
        }
        const { components } = modules.get(moduleName);
        const { instance } = components.get(metatype.name);
        return instance;
    }
    reflectCatchExceptions(metatype) {
        return Reflect.getMetadata(constants_1.FILTER_CATCH_EXCEPTIONS, metatype) || [];
    }
}
exports.RouterExceptionFilters = RouterExceptionFilters;
