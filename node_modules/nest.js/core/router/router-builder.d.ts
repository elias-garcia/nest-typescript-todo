import 'reflect-metadata';
import { Controller } from '../../common/interfaces/controller.interface';
import { RequestMethod } from '../../common/enums/request-method.enum';
import { RouterProxy, RouterProxyCallback } from './router-proxy';
import { ExpressAdapter } from '../adapters/express-adapter';
import { Metatype } from '../../common/interfaces/metatype.interface';
export declare class RouterBuilder {
    private routerProxy;
    private expressAdapter;
    private readonly routerMethodFactory;
    private readonly logger;
    constructor(routerProxy?: RouterProxy, expressAdapter?: ExpressAdapter);
    build(instance: Controller, metatype: Metatype<Controller>): {
        path: string;
        router: any;
    };
    scanForPaths(instance: Controller): RoutePathProperties[];
    scanForPathsFromPrototype(instance: Controller, instancePrototype: any): RoutePathProperties[];
    exploreMethodMetadata(instance: Controller, instancePrototype: any, methodName: string): RoutePathProperties;
    applyPathsToRouterProxy(router: any, routePaths: RoutePathProperties[]): void;
    private bindMethodToRouterProxy(router, pathProperties);
    private fetchRouterPath(metatype);
    private validateRoutePath(path);
}
export interface RoutePathProperties {
    path: string;
    requestMethod: RequestMethod;
    targetCallback: RouterProxyCallback;
}
