import { Controller, Injectable } from '../../common/interfaces/';
import { Module } from './module';
import { NestModuleMetatype } from '../../common/interfaces/module-metatype.interface';
import { Metatype } from '../../common/interfaces/metatype.interface';
export declare class NestContainer {
    private readonly modules;
    addModule(metatype: NestModuleMetatype): void;
    getModules(): Map<string, Module>;
    addRelatedModule(relatedModule: NestModuleMetatype, target: NestModuleMetatype): void;
    addComponent(component: Metatype<Injectable>, metatype: NestModuleMetatype): void;
    addExportedComponent(exportedComponent: Metatype<Injectable>, metatype: NestModuleMetatype): void;
    addController(controller: Metatype<Controller>, metatype: NestModuleMetatype): void;
    clear(): void;
}
export interface InstanceWrapper<T> {
    name: any;
    metatype: Metatype<T>;
    instance: T;
    isResolved: boolean;
    inject?: Metatype<any>[];
    isNotMetatype?: boolean;
}
