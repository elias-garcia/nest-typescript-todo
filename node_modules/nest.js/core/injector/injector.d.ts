import 'reflect-metadata';
import { InstanceWrapper } from './container';
import { Module } from './module';
import { Metatype } from '../../common/interfaces/metatype.interface';
import { Controller } from '../../common/interfaces/controller.interface';
import { Injectable } from '../../common/interfaces/injectable.interface';
import { MiddlewareWrapper } from '../middlewares/container';
export declare class Injector {
    loadInstanceOfMiddleware(wrapper: MiddlewareWrapper, collection: Map<string, MiddlewareWrapper>, module: Module): void;
    loadInstanceOfRoute(wrapper: InstanceWrapper<Controller>, module: Module): void;
    loadPrototypeOfInstance<T>({metatype, name}: InstanceWrapper<T>, collection: Map<string, InstanceWrapper<T>>): void;
    loadInstanceOfComponent(wrapper: InstanceWrapper<Injectable>, module: Module): void;
    loadInstance<T>(wrapper: InstanceWrapper<T>, collection: any, module: Module): void;
    resolveConstructorParams<T>(wrapper: InstanceWrapper<T>, module: Module, inject: any[], callback: (args) => void): void;
    reflectConstructorParams<T>(type: Metatype<T>): any[];
    reflectSelfParams<T>(type: Metatype<T>): any[];
    resolveSingleParam<T>(wrapper: InstanceWrapper<T>, param: Metatype<any> | string | symbol, module: Module): any;
    resolveComponentInstance<T>(module: Module, name: any, wrapper: InstanceWrapper<T>): any;
    scanForComponent(components: Map<string, any>, name: any, module: Module, {metatype}: {
        metatype: any;
    }): any;
    scanForComponentInRelatedModules(module: Module, name: any): any;
}
