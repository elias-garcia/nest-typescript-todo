"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const scanner_1 = require("./core/scanner");
const instance_loader_1 = require("./core/injector/instance-loader");
const container_1 = require("./core/injector/container");
const exceptions_zone_1 = require("./errors/exceptions-zone");
const logger_service_1 = require("./common/services/logger.service");
const constants_1 = require("./core/constants");
const nest_application_1 = require("./nest-application");
const nest_microservice_1 = require("./nest-microservice");
const shared_utils_1 = require("./common/utils/shared.utils");
const express_adapter_1 = require("./core/adapters/express-adapter");
class NestFactory {
    static create(module, express = express_adapter_1.ExpressAdapter.create()) {
        this.initialize(module);
        return this.createNestInstance(new nest_application_1.NestApplication(this.container, express));
    }
    static createMicroservice(module, config) {
        this.initialize(module);
        return this.createNestInstance(new nest_microservice_1.NestMicroservice(this.container, config));
    }
    static createNestInstance(instance) {
        const proxy = this.createProxy(instance);
        proxy.setupModules();
        return proxy;
    }
    static initialize(module) {
        this.logger.log(constants_1.messages.APPLICATION_START);
        exceptions_zone_1.ExceptionsZone.run(() => {
            this.dependenciesScanner.scan(module);
            this.instanceLoader.createInstancesOfDependencies();
        });
    }
    static createProxy(target) {
        const proxy = this.createExceptionProxy();
        return new Proxy(target, {
            get: proxy,
            set: proxy,
        });
    }
    static createExceptionProxy() {
        return (receiver, prop) => {
            if (!(prop in receiver))
                return;
            if (shared_utils_1.isFunction(receiver[prop])) {
                return (...args) => exceptions_zone_1.ExceptionsZone.run(() => {
                    receiver[prop](...args);
                });
            }
            return receiver[prop];
        };
    }
}
NestFactory.container = new container_1.NestContainer();
NestFactory.dependenciesScanner = new scanner_1.DependenciesScanner(NestFactory.container);
NestFactory.instanceLoader = new instance_loader_1.InstanceLoader(NestFactory.container);
NestFactory.logger = new logger_service_1.Logger(NestFactory.name);
exports.NestFactory = NestFactory;
