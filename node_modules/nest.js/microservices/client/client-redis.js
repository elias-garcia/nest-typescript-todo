"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const redis = require("redis");
const client_proxy_1 = require("./client-proxy");
const logger_service_1 = require("../../common/services/logger.service");
class ClientRedis extends client_proxy_1.ClientProxy {
    constructor({ url }) {
        super();
        this.logger = new logger_service_1.Logger(client_proxy_1.ClientProxy.name);
        this.DEFAULT_URL = 'redis://localhost:6379';
        this.url = url || this.DEFAULT_URL;
        this.init();
    }
    sendSingleMessage(msg, callback) {
        const pattern = JSON.stringify(msg.pattern);
        const subscription = (channel, message) => {
            const { err, response } = JSON.parse(message);
            callback(err, response);
            this.sub.unsubscribe(this.getResPatternName(pattern));
            this.sub.removeListener('message', subscription);
        };
        this.sub.on('message', subscription);
        this.sub.subscribe(this.getResPatternName(pattern));
        this.pub.publish(this.getAckPatternName(pattern), JSON.stringify(msg));
        return subscription;
    }
    getAckPatternName(pattern) {
        return `${pattern}_ack`;
    }
    getResPatternName(pattern) {
        return `${pattern}_res`;
    }
    init() {
        this.pub = this.createClient();
        this.sub = this.createClient();
        this.handleErrors(this.pub);
        this.handleErrors(this.sub);
    }
    createClient() {
        return redis.createClient({ url: this.url });
    }
    handleErrors(stream) {
        stream.on('error', (err) => this.logger.error(err));
    }
}
exports.ClientRedis = ClientRedis;
